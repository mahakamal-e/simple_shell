
char **parse_string(char *input_line)
{
        char **arr_str;
        char *token;
        int i_idx = 0;

        arr_str = malloc(8 * sizeof(char *));

        if (arr_str == NULL)
                perror("failed to allocate memory"), exit(1);

        /* Check for quoted strings and remove double quotes*/
        while ((token = strtok(input_line, " \t\n\"")) != NULL)
        {
                if (token[0] == '"')
                {
                        /* Remove double quotes from token*/
                        memmove(token, token+1, strlen(token));
                        token[strlen(token)-1] = '\0';
                }

                if (*token != '\0')
                {
                        arr_str[i_idx] = _my_strdup(token);
                        if (arr_str[i_idx] == NULL)
                                perror("failed to allocate memory"), exit(1);
                        i_idx++;
                }
                input_line = NULL;
        }

        arr_str[i_idx] = NULL;
        return (arr_str);
}
/*#include "shell.h"
char **parse_string(char *input_line)
{
        char **arr_str;
        char *token;
        int i_idx = 0;

        arr_str = malloc(8 * sizeof(char *));

        if (arr_str == NULL)
                perror("failed to allocate memory"), exit(1);

        Check for quoted strings and remove double quotes*/
        /*while (*input_line != '\0')
        {
                if (*input_line == '"')
                {
                        input_line++;
                        token = strtok(input_line, "\"");
                }
                else
                {
                        token = strtok(input_line, " \t\n");
                }

                if (token != NULL && *token != '\0')
                {
                        arr_str[i_idx] = _my_strdup(token);
                        if (arr_str[i_idx] == NULL)
                                perror("failed to allocate memory"), exit(1);
                        i_idx++;
                }
        }

        arr_str[i_idx] = NULL;
        return (arr_str);*/
